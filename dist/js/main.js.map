{"version":3,"sources":["webpack:///./src/js/app.js","webpack:///./src/js/components/collapse.js","webpack:///./src/js/components/fullpage.js","webpack:///./src/js/components/lazyloading.js","webpack:///./src/js/components/modal.js","webpack:///./src/js/components/offcanvas.js"],"names":["Fullpage","Offcanvas","Collapse","Modal","LazyLoading","document","querySelectorAll","forEach","item","addEventListener","fullpage_api","reBuild","fullpage","FullpageJS","menu","navigation","slidesNavigation","scrollOverflow","scrollingSpeed","scrollOverflowOptions","disablePointer","window","navigator","maxTouchPoints","msMaxTouchPoints","lazyloadImages","imageObserver","IntersectionObserver","entries","observer","entry","isIntersecting","image","target","classList","remove","unobserve","observe","htmlVideo","action","getElementsByTagName","modalList","main","getElementById","e","add","bringMainToFront","videoInfos","length","info","navigationRight","navigationRightCanvas","bootstrap","nav","hide"],"mappings":";;;;uDAAA,maAOAA,oBACAC,oBACAC,oBACAC,oBACAC,qB;;;;i0BCEeF,UAbE,WAEO,EAAIG,SAASC,iBAAiB,cACpCC,SAAQ,SAACC,GACvBA,EAAKC,iBAAiB,qBAAqB,WACzCC,aAAaC,aAEfH,EAAKC,iBAAiB,sBAAsB,WAC1CC,aAAaC,kB;;;;6DCRnB,4LAuBeC,UAdE,WACb,IAAIC,IAAW,YAAa,CAExBC,KAAM,cACNC,YAAY,EACZC,kBAAkB,EAClBC,gBAAgB,EAChBC,eAAgB,IAChBC,sBAAuB,CACnBC,iBAdC,iBAAkBC,QACtBC,UAAUC,eAAiB,GAC3BD,UAAUE,iBAAmB,Q;;;;6DCNtC,OAkBepB,UAlBK,WAClB,IAAIqB,EAAiBpB,SAASC,iBAAiB,SAC/C,GAAI,yBAA0Be,OAAQ,CACpC,IAAIK,EAAgB,IAAIC,sBAAqB,SAAUC,EAASC,GAC9DD,EAAQrB,SAAQ,SAAUuB,GACxB,GAAIA,EAAMC,eAAgB,CACxB,IAAMC,EAAQF,EAAMG,OACpBD,EAAME,UAAUC,OAAO,QACvBT,EAAcU,UAAUJ,UAI9BP,EAAelB,SAAQ,SAAUyB,GAC/BN,EAAcW,QAAQL,S;;;;i0BCb5B,IAwBMM,EAAY,YAAwB,IAArBL,EAAqB,EAArBA,OAAQM,EAAa,EAAbA,OACvBD,EAAYL,EAAOO,qBAAqB,SAAS,GAEjDF,GAAWA,EAAUC,MAIZpC,UA/BD,WAGZ,IAAIsC,EAAY,EAAIpC,SAASC,iBAAiB,WACxCoC,EAAOrC,SAASsC,eAAe,QAErCF,EAAUlC,SAAQ,SAACC,GACjBA,EAAKC,iBAAiB,iBAAiB,SAACmC,GACtCF,EAAKR,UAAUW,IAAI,gBACnBP,EAAU,CACRL,OAAQW,EAAEX,OACVM,OAAQ,YAGZ/B,EAAKC,iBAAiB,iBAAiB,SAACmC,GACtCF,EAAKR,UAAUC,OAAO,gBACtBG,EAAU,CACRL,OAAQW,EAAEX,OACVM,OAAQ,kB;;;;84BChBhB,IAcMO,EAAmB,WACvB,IAAIC,EAAa,EAAI1C,SAASC,iBAAiB,wBAC3CoC,EAAOrC,SAASsC,eAAe,QAE/BI,EAAWC,OAAS,GACtBD,EAAWxC,SAAQ,SAAC0C,GAClBA,EAAKxC,iBAAiB,qBAAqB,SAAUmC,GACnDF,EAAKR,UAAUW,IAAI,mBAErBI,EAAKxC,iBAAiB,qBAAqB,WACzCiC,EAAKR,UAAUC,OAAO,uBAOflC,UA/BG,WAChB,IAAIiD,EAAkB7C,SAASsC,eAAe,mBAC1CQ,EAAwB,IAAIC,YAAoBF,GACnC,EAAI7C,SAASC,iBAAiB,sBAEpCC,SAAQ,SAAC8C,GAClBA,EAAI5C,iBAAiB,SAAS,WAC5B0C,EAAsBG,aAG1BR,M","file":"main.bundle.js","sourcesContent":["import 'bootstrap';\nimport Fullpage from './components/fullpage';\nimport Offcanvas from './components/offcanvas';\nimport Collapse from './components/collapse';\nimport Modal from './components/modal';\nimport LazyLoading from './components/lazyloading';\n\nFullpage();\nOffcanvas();\nCollapse();\nModal();\nLazyLoading();","const Collapse = () => {\n  // update fullpage height on accordion collapse\n  let collapsibleList = [...document.querySelectorAll('.collapse')];\n  collapsibleList.forEach((item) => {\n    item.addEventListener('shown.bs.collapse', () => {\n      fullpage_api.reBuild();\n    })\n    item.addEventListener('hidden.bs.collapse', () => {\n      fullpage_api.reBuild();\n    })\n  })\n}\n\nexport default Collapse","import \"fullpage.js/vendors/scrolloverflow\"\nimport FullpageJS from \"fullpage.js\"\n\nconst isTouchDevice = () => {\n    return (('ontouchstart' in window) ||\n        (navigator.maxTouchPoints > 0) ||\n        (navigator.msMaxTouchPoints > 0));\n}\n\nconst fullpage = () => {\n    new FullpageJS('#fullpage', {\n        // autoScrolling: false,\n        menu: \"#navigation\",\n        navigation: true,\n        slidesNavigation: true,\n        scrollOverflow: true,\n        scrollingSpeed: 1000,\n        scrollOverflowOptions: {\n            disablePointer: isTouchDevice() ? false : true\n        }\n    });\n}\n\nexport default fullpage  ","const LazyLoading = () => {\n  let lazyloadImages = document.querySelectorAll(\".lazy\");\n  if (\"IntersectionObserver\" in window) {\n    let imageObserver = new IntersectionObserver(function (entries, observer) {\n      entries.forEach(function (entry) {\n        if (entry.isIntersecting) {\n          const image = entry.target;\n          image.classList.remove(\"lazy\");\n          imageObserver.unobserve(image);\n        }\n      });\n    });\n    lazyloadImages.forEach(function (image) {\n      imageObserver.observe(image);\n    });\n  }\n}\n\nexport default LazyLoading;","const Modal = () => {\n  // update fullpage height on accordion collapse\n  // sets higher z-index if modal is active\n  let modalList = [...document.querySelectorAll('.modal')];\n  const main = document.getElementById('main');\n\n  modalList.forEach((item) => {\n    item.addEventListener('show.bs.modal', (e) => {\n      main.classList.add('modal-active');\n      htmlVideo({\n        target: e.target,\n        action: \"play\"\n      });\n    })\n    item.addEventListener('hide.bs.modal', (e) => {\n      main.classList.remove('modal-active');\n      htmlVideo({\n        target: e.target,\n        action: \"pause\"\n      });\n    })\n  })\n}\n\nconst htmlVideo = ({ target, action }) => {\n  let htmlVideo = target.getElementsByTagName(\"video\")[0];\n\n  if (htmlVideo) htmlVideo[action]();\n}\n\n\nexport default Modal","import * as bootstrap from \"bootstrap\";\n\nconst Offcanvas = () => {\n  let navigationRight = document.getElementById('navigationRight');\n  let navigationRightCanvas = new bootstrap.Offcanvas(navigationRight)\n  let navigation = [...document.querySelectorAll('.navigation__link')];\n\n  navigation.forEach((nav) => {\n    nav.addEventListener(\"click\", () => {\n      navigationRightCanvas.hide();\n    })\n  })\n  bringMainToFront();\n}\n\n// sets higher z-index if offcanvas is active \nconst bringMainToFront = () => {\n  let videoInfos = [...document.querySelectorAll('.video-info__canvas')];\n  let main = document.getElementById('main');\n\n  if (videoInfos.length > 0) {\n    videoInfos.forEach((info) => {\n      info.addEventListener('show.bs.offcanvas', function (e) {\n        main.classList.add('modal-active')\n      })\n      info.addEventListener('hide.bs.offcanvas', function () {\n        main.classList.remove('modal-active')\n      })\n    })\n  }\n\n}\n\nexport default Offcanvas  "],"sourceRoot":""}